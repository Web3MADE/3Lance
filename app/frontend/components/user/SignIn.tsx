"use client";

import { Box, Button } from "@mui/material";
import { usePrivy, useWallets } from "@privy-io/react-auth";
import Image from "next/image";
import { useRouter } from "next/navigation";

export default function SignIn() {
  const { wallets } = useWallets();
  const { ready, authenticated, login, logout, user } = usePrivy();
  const router = useRouter();
  console.log("user home page ", user);
  // TODO Later: Gasless transactions
  // useEffect(() => {
  //   const getEmbeddedWallet = async () => {
  //     if (ready && authenticated && SEPOLIA_CHAIN_ID) {
  //       // Get the embedded wallet generated by privy as the user's wallet
  //       const embeddedWallet = wallets.find(
  //         (wallet) => wallet.walletClientType === "privy"
  //       );

  //       if (!embeddedWallet) return;
  //       await embeddedWallet.switchChain(SEPOLIA_CHAIN_ID);

  //       // Initialize your bundler for Biconomy = bundles user operations/transactions for us on Sepolia
  //       const bundler: IBundler = new Bundler({
  //         bundlerUrl: `https://bundler.biconomy.io/api/v2/${SEPOLIA_CHAIN_ID}/nJPK7B3ru.dd7f7861-190d-41bd-af80-6877f74b8f44`,
  //         chainId: SEPOLIA_CHAIN_ID,
  //       });

  //       // Initialize your paymaster for Biconomy = pays for user transactions via gas sponsorship on Sepolia
  //       const paymaster: IPaymaster = new BiconomyPaymaster({
  //         paymasterUrl:
  //           "https://paymaster.biconomy.io/api/v1/11155111/Cf0R4fK99.20140d3d-3eb2-4e86-9f76-3240ef0f722a",
  //       });
  //       // get the Signer from the embedded wallet so it can sign transactions for the smart account
  //       const provider = await embeddedWallet.getEthersProvider();
  //       const signer = provider.getSigner();

  //       // Initialize Biconomy's validation module with the ethers signer to authorize user operations for the smart account
  //       const defaultValidationModule =
  //         await createECDSAOwnershipValidationModule({ signer });

  //       const smartAccount = await createSmartAccountClient({
  //         defaultValidationModule,
  //         paymaster,
  //         bundler,
  //         rpcUrl:
  //           "https://sepolia.infura.io/v3/4b3d75730534458fae28fd4746bdc560",
  //       });
  //       console.log("smart account", smartAccount);
  //       await sponsorTransaction(smartAccount, signer);
  //     }
  //   };

  //   getEmbeddedWallet();
  // }, [ready, authenticated, router, wallets]);
  // // TODO: Why am I running into the SAME issue as with gelato - the contract is not being called, even though it's successful?????
  // async function sponsorTransaction(
  //   smartAccount: BiconomySmartAccountV2,
  //   signer: any
  // ) {
  //   Interface;
  //   const abi = ["function increment() public"];
  //   const counterContract = new ethers.Contract(
  //     "0x26a44E5bD991825Fe8AF2aa2E2e891E0926a37CC",
  //     abi,
  //     signer
  //   );
  //   const unsignedTx = await counterContract.increment.populateTransaction();
  //   const userOp = {
  //     to: "0x26a44E5bD991825Fe8AF2aa2E2e891E0926a37CC",
  //     data: unsignedTx.data,
  //   };
  //   const userOpResponse = await smartAccount.sendTransaction(userOp, {
  //     paymasterServiceData: { mode: PaymasterMode.SPONSORED },
  //   });
  //   const { transactionHash } = await userOpResponse.waitForTxHash();
  //   console.log("transaction hash ", transactionHash);
  //   const userOpReceipt = await userOpResponse.wait();
  //   console.log("userOpReceipt ", userOpReceipt);
  // }

  return (
    <Box sx={{ display: "flex", height: "100vh" }}>
      <Box
        sx={{
          display: "flex",
          flexDirection: "column",
          justifyContent: "center",
          gap: "1.5rem",
          width: "50%",
          alignItems: "center",
        }}
      >
        <Box
          sx={{
            display: "flex",
            flexDirection: "column",
            alignItems: "center",
          }}
        >
          <Button variant="contained" onClick={login}>
            Log in
          </Button>
          <Button variant="contained" onClick={logout}>
            Log out
          </Button>
        </Box>
      </Box>

      <Box
        sx={{
          flex: 1,
          display: "flex",
        }}
      >
        <div style={{ position: "relative", width: "100%", height: "100%" }}>
          <Image
            src="/happyfreelancer.jpeg"
            alt="Happy Freelancer"
            layout="fill"
            objectFit="cover"
          />
        </div>
      </Box>
    </Box>
  );
}
